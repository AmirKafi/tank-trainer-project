services:
  postgres:
    image: postgres:17.0
    env_file:
      - DatabaseConf.env
    environment:
      - POSTGRES_USER:${POSTGRES_USER}
      - POSTGRES_PASSWORD:${POSTGRES_PASSWORD}
      - POSTGRES_DB:${POSTGRES_DB}
      - POSTGRES_HOST:${POSTGRES_HOST}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - RabbitMQConf.env
    environment:
      - RABBITMQ_DEFAULT_USER:${USERNAME}
      - RABBITMQ_DEFAULT_PASS:${PASSWORD}
      - RABBITMQ_URL:${RABBITMQ_URL}
    ports:
      - "5672:5672"
      - "15672:15672"
    hostname: rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.0-M02-alpine
    ports:
      - "6379:6379"
    env_file:
      - RedisConf.env
    environment:
      - REDIS_HOST:${REDIS_HOST}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    env_file:
      - DatabaseConf.env
    environment:
      - DATABASE_URL:${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "5000:5000"
    restart: on-failure

  nginx:
    image: nginx:1.27
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"  # Expose NGINX on port 80
    depends_on:
      - web
    restart: on-failure